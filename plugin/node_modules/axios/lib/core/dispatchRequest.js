Cube("/node_modules/axios/lib/core/dispatchRequest.js", ["/node_modules/axios/lib/utils.js", "/node_modules/axios/lib/core/transformData.js", "/node_modules/axios/lib/cancel/isCancel.js", "/node_modules/axios/lib/defaults.js", "/node_modules/axios/lib/cancel/Cancel.js"], function (module, exports, require, load, process, global) {

  var utils = require('/node_modules/axios/lib/utils.js');
  var transformData = require('/node_modules/axios/lib/core/transformData.js');
  var isCancel = require('/node_modules/axios/lib/cancel/isCancel.js');
  var defaults = require('/node_modules/axios/lib/defaults.js');
  var Cancel = require('/node_modules/axios/lib/cancel/Cancel.js');
  function throwIfCancellationRequested(config) {
    if (config.cancelToken) {
      config.cancelToken.throwIfRequested();
    }
    if (config.signal && config.signal.aborted) {
      throw new Cancel('canceled');
    }
  }
  module.exports = function dispatchRequest(config) {
    throwIfCancellationRequested(config);
    config.headers = config.headers || {};
    config.data = transformData.call(config, config.data, config.headers, config.transformRequest);
    config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
    utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
      delete config.headers[method];
    });
    var adapter = config.adapter || defaults.adapter;
    return adapter(config).then(function onAdapterResolution(response) {
      throwIfCancellationRequested(config);
      response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
      return response;
    }, function onAdapterRejection(reason) {
      if (!isCancel(reason)) {
        throwIfCancellationRequested(config);
        if (reason && reason.response) {
          reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
        }
      }
      return Promise.reject(reason);
    });
  };return module.exports;});