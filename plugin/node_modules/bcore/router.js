Cube("/node_modules/bcore/router.js", [], function (module, exports, require, load, process, global) {

  function parsing(str, type) {
    var res = {};
    if (!str) {
      return res;
    }
    var arr = [];
    var tmp = [];
    if (type === 'hash') {
      arr = str.split('/');
      for (var i = 0, len = arr.length; i < len; i++) {
        if (!arr[i]) {
          continue;
        }
        tmp = arr[i].split(':');
        try {
          res[tmp[0]] = decodeURIComponent(tmp[1]);
        } catch (e) {
          console.log(e);
        }
      }
    }
    return res;
  }
  function stringify(obj) {
    var str = [],
    tmp;
    for (var key in obj) {
      tmp = obj[key];
      if (tmp === 'undefined' || tmp === undefined || tmp === null || typeof obj[key] === 'function') {
        continue;
      }
      str.push(key, ':', encodeURIComponent(tmp), '/');
    }
    str.pop();
    return str.join('');
  }
  function filter(data, filters) {
    var obj = {};
    var tmp;
    var ff;
    for (var i in data) {
      tmp = data[i];
      ff = filters[i];
      if (ff && ff.test(tmp)) {
        obj[i] = tmp;
      }
    }
    return obj;
  }
  function equal(a, b) {
    var checked = {};
    for (var i in a) {
      if (a[i] != b[i]) {
        return false;
      }
      checked[i] = true;
    }
    var flag = true;
    for (var j in b) {
      if (checked[j]) {
        continue;
      }
      flag = false;
    }
    return flag;
  }
  function clone(obj) {
    var copy = {};
    for (var key in obj) {
      copy[key] = obj[key];
    }
    return copy;
  }
  module.exports = {
    data: {},
    accessList: {},
    type: 'hash',
    init: function init(config) {
      this.accessList = config.accessKeys || {};
      this.onSave = config.onSave || function () {};
      this.hashChange(config.hashChange || function () {});
      var hash = location.href.split('#!')[1] || '';
      var routerObj = filter(parsing(hash, this.type), this.accessList);
      this.data = routerObj;
      config.hashChange(routerObj);
      this.update(config.data || {}, true);
    },
    registKeys: function registKeys(keys) {
      var orig = this.accessList;
      for (var i in keys) {
        orig[i] = keys[i];
      }
    },
    get: function get(key) {
      return key ? this.data[key] : this.data;
    },
    update: function update(param, trigger) {
      if (!param || this.isEmpty(param)) {
        return;
      }
      var data;
      if (trigger) {
        data = clone(this.data);
      } else {
        data = this.data;
      }
      for (var i in param) {
        if (this.accessList[i]) {
          data[i] = param[i];
        }
      }
      var hash = stringify(data);
      location.hash = '#!/' + hash;
      this.onSave(data);
    },
    clear: function clear() {
      this.data = {};
    },
    hashChange: function hashChange(fn) {
      var self = this;
      function _change() {
        var hash = location.href.split('#!')[1] || '';
        var hashObj = filter(parsing(hash, self.type), self.accessList);
        if (equal(self.data, hashObj)) {
          return;
        }
        self.data = hashObj;
        fn(hashObj);
        self.onSave(hashObj);
      }
      if (window.addEventListener) {
        window.addEventListener('hashchange', _change, false);
      } else if (window.attachEvent) {
        window.attachEvent('hashchange', _change);
      } else {
        console.error('browser not support hashchange');
      }
    },
    isEmpty: function isEmpty(obj) {
      var key = true;
      for (var i in obj) {
        key = false;
        break;
      }
      return key;
    } };return module.exports;});