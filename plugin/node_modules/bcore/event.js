Cube("/node_modules/bcore/event.js", ["/node_modules/bcore/class.js"], function (module, exports, require, load, process, global) {

  function _instanceof(left, right) {if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {return !!right[Symbol.hasInstance](left);} else {return left instanceof right;}}
  var Class = require('/node_modules/bcore/class.js');
  var isArray = Array.isArray || function (obj) {
    return Object.prototype.toString.call(obj) === '[object Array]' ? true : false;
  };
  function EventEmitter() {}
  EventEmitter = Class.extend(EventEmitter);
  module.exports = EventEmitter;
  exports.EventEmitter = EventEmitter;
  var defaultMaxListeners = 20;
  EventEmitter.prototype.setMaxListeners = function (n) {
    if (!this._events) this._events = {};
    this._maxListeners = n;
  };
  EventEmitter.prototype.emit = function () {
    var type = arguments[0];
    if (type === 'error') {
      if (!this._events || !this._events.error || isArray(this._events.error) && !this._events.error.length) {
        if (_instanceof(arguments[1], Error)) {
          throw arguments[1];
        } else {
          throw new Error("Uncaught, unspecified 'error' event.");
        }
        return false;
      }
    }
    if (!this._events) return false;
    var handler = this._events[type];
    if (!handler) return false;
    if (typeof handler == 'function') {
      switch (arguments.length) {
        case 1:
          handler.call(this);
          break;
        case 2:
          handler.call(this, arguments[1]);
          break;
        case 3:
          handler.call(this, arguments[1], arguments[2]);
          break;
        default:
          var l = arguments.length;
          var args = new Array(l - 1);
          for (var i = 1; i < l; i++) args[i - 1] = arguments[i];
          handler.apply(this, args);}

      return true;
    } else if (isArray(handler)) {
      var l = arguments.length;
      var args = new Array(l - 1);
      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];
      var listeners = handler.slice();
      for (var i = 0, l = listeners.length; i < l; i++) {
        listeners[i].apply(this, args);
      }
      return true;
    } else {
      return false;
    }
  };
  EventEmitter.prototype.addListener = function (type, listener) {
    if ('function' !== typeof listener) {
      throw new Error('addListener only takes instances of Function');
    }
    if (!this._events) this._events = {};
    this.emit('newListener', type, listener);
    if (!this._events[type]) {
      this._events[type] = listener;
    } else if (isArray(this._events[type])) {
      this._events[type].push(listener);
    } else {
      this._events[type] = [this._events[type], listener];
    }
    if (isArray(this._events[type]) && !this._events[type].warned) {
      var m;
      if (this._maxListeners !== undefined) {
        m = this._maxListeners;
      } else {
        m = defaultMaxListeners;
      }
      if (m && m > 0 && this._events[type].length > m) {
        this._events[type].warned = true;
        console.error('Possible mem-leak detected. event[' + type + '] %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', this._events[type].length);
        console.trace();
      }
    }
    return this;
  };
  EventEmitter.prototype.on = EventEmitter.prototype.addListener;
  EventEmitter.prototype.once = function (type, listener) {
    if ('function' !== typeof listener) {
      throw new Error('.once only takes instances of Function');
    }
    var self = this;
    function g() {
      self.removeListener(type, g);
      listener.apply(this, arguments);
    }
    ;
    g.listener = listener;
    self.on(type, g);
    return this;
  };
  EventEmitter.prototype.removeListener = function (type, listener) {
    if ('function' !== typeof listener) {
      throw new Error('removeListener only takes instances of Function');
    }
    if (!this._events || !this._events[type]) return this;
    var list = this._events[type];
    if (isArray(list)) {
      var position = -1;
      for (var i = 0, length = list.length; i < length; i++) {
        if (list[i] === listener || list[i].listener && list[i].listener === listener) {
          position = i;
          break;
        }
      }
      if (position < 0) return this;
      list.splice(position, 1);
      if (list.length == 0) delete this._events[type];
    } else if (list === listener || list.listener && list.listener === listener) {
      delete this._events[type];
    }
    return this;
  };
  EventEmitter.prototype.removeAllListeners = function (type) {
    if (arguments.length === 0) {
      this._events = {};
      return this;
    }
    if (type && this._events && this._events[type]) this._events[type] = null;
    return this;
  };
  EventEmitter.prototype.listeners = function (type) {
    if (!this._events) this._events = {};
    if (!this._events[type]) this._events[type] = [];
    if (!isArray(this._events[type])) {
      this._events[type] = [this._events[type]];
    }
    return this._events[type];
  };
  EventEmitter.prototype.off = EventEmitter.prototype.removeAllListeners;
  EventEmitter.prototype.on = EventEmitter.prototype.addListener;
  EventEmitter.prototype.fire = EventEmitter.prototype.fireEvent = EventEmitter.prototype.emit;
  EventEmitter.prototype.clearAllEventListeners = EventEmitter.prototype.removeAllListeners;return module.exports;});